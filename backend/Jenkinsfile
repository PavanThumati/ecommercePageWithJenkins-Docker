pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'my-ecommerce-backend'
        DOCKER_TAG = "${BUILD_NUMBER}"
        REGISTRY = 'pavanthumati/my-ecommerce'
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Clone the GitHub repository
                git url: 'https://github.com/PavanThumati/ecommercePageWithJenkins-Docker.git', branch: 'main'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Navigate to the backend directory and build the Docker image
                dir('backend') {
                    script {
                        // Build the Docker image with the dynamically set tag
                        sh "docker build -f Dockerfile -t ${REGISTRY}:${DOCKER_TAG} ."
                    }
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                // Push the Docker image to Docker Hub using Jenkins credentials
                script {
                    withDockerRegistry([credentialsId: 'DockerHubCredentials', url: 'https://index.docker.io/v1/']) {
                    sh 'docker push $DOCKER_IMAGE'
                  }
                }
            }
        }

        stage('Deploy to Local Docker') {
            steps {
                // Stop and remove any running container named 'ecommerce'
                script {
                    sh """
                        docker ps -q -f name=ecommerce | xargs -r docker stop
                        docker ps -a -q -f name=ecommerce | xargs -r docker rm
                        docker run -d --name ecommerce -p 5000:5000 ${REGISTRY}:${DOCKER_TAG}
                    """
                }
            }
        }

        stage('Test the Application') {
            steps {
                // Test the application by making a curl request
                script {
                    sh 'curl http://localhost:5000/products'
                }
            }
        }
    }
    post {
        success {
            // Print success message on successful deployment
            echo 'Deployment Successful!'
        }
        failure {
            // Print failure message if the pipeline fails
            echo 'Deployment Failed!'
        }
    }
}
